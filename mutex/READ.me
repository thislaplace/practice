一、互斥锁
互斥量从本质上来说就是一把锁，提供对共享资源的保护访问。

    1.初始化：
    在linux下，线程的互斥量数据类型是pthread_mutex_t.在使用之前，要对它进行初始化：
    对于静态分配的互斥量，可以把它设置为PTHREAD_MUTEX_INITIALIZER,或者调用pthread_mutex_init.
    对于动态分配的互斥量，在申请内存（malloc）后，通过pthread_mutex_init进行初始化，并且在释放
    内存（free）前需要调用pthread_mutex_destory.

    函数原型：
    int pthread_mutex_init(pthread_mutex_t *restrict mutex, const pthread_mutexattr_t *restric attr);
    int pthread_mutex_destory(pthread_mutex_t *mutex);
    返回值：成功返回0，失败返回错误编号.
    说明：如果使用默认的属性初始化互斥量，只需把attr设为NULL.


    2.互斥操作：
    对共享资源的访问，要对互斥量进行加锁，如果互斥量已经上了锁，调用线程会阻塞，直到互斥量被解锁.
    在完成了对共享资源的访问后，要对互斥量进行解锁

    加锁函数：
    int pthread_mutex_lock(pthread_mutex_t *mutex);
    int pthread_mutex_trylock(pthread_mutex_t *mutex);
    返回值：成功返回0，失败返回错误编号
    说明：trylock函数是非阻塞调用模式，即，如果互斥量没被锁住，trylock函数会把互斥量加锁，并获得对
    共享资源的访问权限.如果互斥量被锁住了，trylock函数不会阻塞等待而直接返回EBUSY,表示共享资源处于
    忙状态。

    解锁函数：
    int pthread_mutex_unlock(pthread_mutex_t *mutex);
    返回值：成功返回0，失败返回错误编号

    
    3.死锁
    死锁主要发生在有多个依赖锁存在时，会在一个线程试图与另一个线程相反顺序锁住互斥量时发生.如何避免
    死锁是使用互斥量应格外注意的问题.

    总的来说有几个不成文的基本原则：
    对共享资源操作前一定要获得锁。完成操作后一定要释放锁，尽量短时间的占用锁。如果有多锁，如果获得顺
    序是ABC连环扣，释放顺序也应该是ABC.线程错误返回时应该释放他所获得的锁。
